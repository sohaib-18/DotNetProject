#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication10
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Gym")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendance(Attendance instance);
    partial void UpdateAttendance(Attendance instance);
    partial void DeleteAttendance(Attendance instance);
    partial void InsertAttendanceStatus(AttendanceStatus instance);
    partial void UpdateAttendanceStatus(AttendanceStatus instance);
    partial void DeleteAttendanceStatus(AttendanceStatus instance);
    partial void InsertCustomField(CustomField instance);
    partial void UpdateCustomField(CustomField instance);
    partial void DeleteCustomField(CustomField instance);
    partial void InsertFee(Fee instance);
    partial void UpdateFee(Fee instance);
    partial void DeleteFee(Fee instance);
    partial void InsertFeeStatus(FeeStatus instance);
    partial void UpdateFeeStatus(FeeStatus instance);
    partial void DeleteFeeStatus(FeeStatus instance);
    partial void InsertMemberDetail(MemberDetail instance);
    partial void UpdateMemberDetail(MemberDetail instance);
    partial void DeleteMemberDetail(MemberDetail instance);
    partial void InsertMemberPackage(MemberPackage instance);
    partial void UpdateMemberPackage(MemberPackage instance);
    partial void DeleteMemberPackage(MemberPackage instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    partial void InsertPackageType(PackageType instance);
    partial void UpdatePackageType(PackageType instance);
    partial void DeletePackageType(PackageType instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GymConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attendance> Attendances
		{
			get
			{
				return this.GetTable<Attendance>();
			}
		}
		
		public System.Data.Linq.Table<AttendanceStatus> AttendanceStatus
		{
			get
			{
				return this.GetTable<AttendanceStatus>();
			}
		}
		
		public System.Data.Linq.Table<CustomField> CustomFields
		{
			get
			{
				return this.GetTable<CustomField>();
			}
		}
		
		public System.Data.Linq.Table<Fee> Fees
		{
			get
			{
				return this.GetTable<Fee>();
			}
		}
		
		public System.Data.Linq.Table<FeeStatus> FeeStatus
		{
			get
			{
				return this.GetTable<FeeStatus>();
			}
		}
		
		public System.Data.Linq.Table<MemberDetail> MemberDetails
		{
			get
			{
				return this.GetTable<MemberDetail>();
			}
		}
		
		public System.Data.Linq.Table<MemberPackage> MemberPackages
		{
			get
			{
				return this.GetTable<MemberPackage>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Package> Packages
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
		
		public System.Data.Linq.Table<PackageType> PackageTypes
		{
			get
			{
				return this.GetTable<PackageType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendance")]
	public partial class Attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _StatusId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<AttendanceStatus> _AttendanceStatus;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStatusIdChanging(System.Nullable<int> value);
    partial void OnStatusIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Attendance()
		{
			this._AttendanceStatus = default(EntityRef<AttendanceStatus>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int")]
		public System.Nullable<int> StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._AttendanceStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttendanceStatus_Attendance", Storage="_AttendanceStatus", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public AttendanceStatus AttendanceStatus
		{
			get
			{
				return this._AttendanceStatus.Entity;
			}
			set
			{
				AttendanceStatus previousValue = this._AttendanceStatus.Entity;
				if (((previousValue != value) 
							|| (this._AttendanceStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttendanceStatus.Entity = null;
						previousValue.Attendances.Remove(this);
					}
					this._AttendanceStatus.Entity = value;
					if ((value != null))
					{
						value.Attendances.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AttendanceStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Attendance", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Attendances.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Attendances.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttendanceStatus")]
	public partial class AttendanceStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _StatusName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Attendance> _Attendances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public AttendanceStatus()
		{
			this._Attendances = new EntitySet<Attendance>(new Action<Attendance>(this.attach_Attendances), new Action<Attendance>(this.detach_Attendances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttendanceStatus_Attendance", Storage="_Attendances", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<Attendance> Attendances
		{
			get
			{
				return this._Attendances;
			}
			set
			{
				this._Attendances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.AttendanceStatus = this;
		}
		
		private void detach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.AttendanceStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomFields")]
	public partial class CustomField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FieldName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<MemberDetail> _MemberDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CustomField()
		{
			this._MemberDetails = new EntitySet<MemberDetail>(new Action<MemberDetail>(this.attach_MemberDetails), new Action<MemberDetail>(this.detach_MemberDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomField_MemberDetail", Storage="_MemberDetails", ThisKey="Id", OtherKey="FieldId")]
		public EntitySet<MemberDetail> MemberDetails
		{
			get
			{
				return this._MemberDetails;
			}
			set
			{
				this._MemberDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MemberDetails(MemberDetail entity)
		{
			this.SendPropertyChanging();
			entity.CustomField = this;
		}
		
		private void detach_MemberDetails(MemberDetail entity)
		{
			this.SendPropertyChanging();
			entity.CustomField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fees")]
	public partial class Fee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private int _MemberPackageId;
		
		private int _TotalFees;
		
		private int _PaidFees;
		
		private int _RemainingFees;
		
		private int _StatusId;
		
		private System.DateTime _Date;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<FeeStatus> _FeeStatus;
		
		private EntityRef<MemberPackage> _MemberPackage;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnMemberPackageIdChanging(int value);
    partial void OnMemberPackageIdChanged();
    partial void OnTotalFeesChanging(int value);
    partial void OnTotalFeesChanged();
    partial void OnPaidFeesChanging(int value);
    partial void OnPaidFeesChanged();
    partial void OnRemainingFeesChanging(int value);
    partial void OnRemainingFeesChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Fee()
		{
			this._FeeStatus = default(EntityRef<FeeStatus>);
			this._MemberPackage = default(EntityRef<MemberPackage>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberPackageId", DbType="Int NOT NULL")]
		public int MemberPackageId
		{
			get
			{
				return this._MemberPackageId;
			}
			set
			{
				if ((this._MemberPackageId != value))
				{
					if (this._MemberPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberPackageIdChanging(value);
					this.SendPropertyChanging();
					this._MemberPackageId = value;
					this.SendPropertyChanged("MemberPackageId");
					this.OnMemberPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalFees", DbType="Int NOT NULL")]
		public int TotalFees
		{
			get
			{
				return this._TotalFees;
			}
			set
			{
				if ((this._TotalFees != value))
				{
					this.OnTotalFeesChanging(value);
					this.SendPropertyChanging();
					this._TotalFees = value;
					this.SendPropertyChanged("TotalFees");
					this.OnTotalFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidFees", DbType="Int NOT NULL")]
		public int PaidFees
		{
			get
			{
				return this._PaidFees;
			}
			set
			{
				if ((this._PaidFees != value))
				{
					this.OnPaidFeesChanging(value);
					this.SendPropertyChanging();
					this._PaidFees = value;
					this.SendPropertyChanged("PaidFees");
					this.OnPaidFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainingFees", DbType="Int NOT NULL")]
		public int RemainingFees
		{
			get
			{
				return this._RemainingFees;
			}
			set
			{
				if ((this._RemainingFees != value))
				{
					this.OnRemainingFeesChanging(value);
					this.SendPropertyChanging();
					this._RemainingFees = value;
					this.SendPropertyChanged("RemainingFees");
					this.OnRemainingFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._FeeStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeeStatus_Fee", Storage="_FeeStatus", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public FeeStatus FeeStatus
		{
			get
			{
				return this._FeeStatus.Entity;
			}
			set
			{
				FeeStatus previousValue = this._FeeStatus.Entity;
				if (((previousValue != value) 
							|| (this._FeeStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeeStatus.Entity = null;
						previousValue.Fees.Remove(this);
					}
					this._FeeStatus.Entity = value;
					if ((value != null))
					{
						value.Fees.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("FeeStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberPackage_Fee", Storage="_MemberPackage", ThisKey="MemberPackageId", OtherKey="Id", IsForeignKey=true)]
		public MemberPackage MemberPackage
		{
			get
			{
				return this._MemberPackage.Entity;
			}
			set
			{
				MemberPackage previousValue = this._MemberPackage.Entity;
				if (((previousValue != value) 
							|| (this._MemberPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberPackage.Entity = null;
						previousValue.Fees.Remove(this);
					}
					this._MemberPackage.Entity = value;
					if ((value != null))
					{
						value.Fees.Add(this);
						this._MemberPackageId = value.Id;
					}
					else
					{
						this._MemberPackageId = default(int);
					}
					this.SendPropertyChanged("MemberPackage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Fee", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Fees.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Fees.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeeStatus")]
	public partial class FeeStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _StatusName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Fee> _Fees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public FeeStatus()
		{
			this._Fees = new EntitySet<Fee>(new Action<Fee>(this.attach_Fees), new Action<Fee>(this.detach_Fees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeeStatus_Fee", Storage="_Fees", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<Fee> Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				this._Fees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fees(Fee entity)
		{
			this.SendPropertyChanging();
			entity.FeeStatus = this;
		}
		
		private void detach_Fees(Fee entity)
		{
			this.SendPropertyChanging();
			entity.FeeStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberDetails")]
	public partial class MemberDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private int _FieldId;
		
		private string _Value;
		
		private EntityRef<CustomField> _CustomField;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public MemberDetail()
		{
			this._CustomField = default(EntityRef<CustomField>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int NOT NULL")]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._CustomField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomField_MemberDetail", Storage="_CustomField", ThisKey="FieldId", OtherKey="Id", IsForeignKey=true)]
		public CustomField CustomField
		{
			get
			{
				return this._CustomField.Entity;
			}
			set
			{
				CustomField previousValue = this._CustomField.Entity;
				if (((previousValue != value) 
							|| (this._CustomField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomField.Entity = null;
						previousValue.MemberDetails.Remove(this);
					}
					this._CustomField.Entity = value;
					if ((value != null))
					{
						value.MemberDetails.Add(this);
						this._FieldId = value.Id;
					}
					else
					{
						this._FieldId = default(int);
					}
					this.SendPropertyChanged("CustomField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberDetail", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.MemberDetails.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.MemberDetails.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberPackages")]
	public partial class MemberPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private int _PackageId;
		
		private System.DateTime _StartingDate;
		
		private System.Nullable<System.DateTime> _EndingDate;
		
		private string _Remarks;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Fee> _Fees;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Package> _Package;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnStartingDateChanging(System.DateTime value);
    partial void OnStartingDateChanged();
    partial void OnEndingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndingDateChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public MemberPackage()
		{
			this._Fees = new EntitySet<Fee>(new Action<Fee>(this.attach_Fees), new Action<Fee>(this.detach_Fees));
			this._Member = default(EntityRef<Member>);
			this._Package = default(EntityRef<Package>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="Int NOT NULL")]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDate", DbType="Date NOT NULL")]
		public System.DateTime StartingDate
		{
			get
			{
				return this._StartingDate;
			}
			set
			{
				if ((this._StartingDate != value))
				{
					this.OnStartingDateChanging(value);
					this.SendPropertyChanging();
					this._StartingDate = value;
					this.SendPropertyChanged("StartingDate");
					this.OnStartingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndingDate
		{
			get
			{
				return this._EndingDate;
			}
			set
			{
				if ((this._EndingDate != value))
				{
					this.OnEndingDateChanging(value);
					this.SendPropertyChanging();
					this._EndingDate = value;
					this.SendPropertyChanged("EndingDate");
					this.OnEndingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(1500)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberPackage_Fee", Storage="_Fees", ThisKey="Id", OtherKey="MemberPackageId")]
		public EntitySet<Fee> Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				this._Fees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberPackage", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.MemberPackages.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.MemberPackages.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_MemberPackage", Storage="_Package", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.MemberPackages.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.MemberPackages.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fees(Fee entity)
		{
			this.SendPropertyChanging();
			entity.MemberPackage = this;
		}
		
		private void detach_Fees(Fee entity)
		{
			this.SendPropertyChanging();
			entity.MemberPackage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private string _Address;
		
		private int _RegisterationFees;
		
		private int _AdmissionFees;
		
		private System.DateTime _RegisteredOn;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private string _ProfilePic;
		
		private EntitySet<Attendance> _Attendances;
		
		private EntitySet<Fee> _Fees;
		
		private EntitySet<MemberDetail> _MemberDetails;
		
		private EntitySet<MemberPackage> _MemberPackages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnRegisterationFeesChanging(int value);
    partial void OnRegisterationFeesChanged();
    partial void OnAdmissionFeesChanging(int value);
    partial void OnAdmissionFeesChanged();
    partial void OnRegisteredOnChanging(System.DateTime value);
    partial void OnRegisteredOnChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnProfilePicChanging(string value);
    partial void OnProfilePicChanged();
    #endregion
		
		public Member()
		{
			this._Attendances = new EntitySet<Attendance>(new Action<Attendance>(this.attach_Attendances), new Action<Attendance>(this.detach_Attendances));
			this._Fees = new EntitySet<Fee>(new Action<Fee>(this.attach_Fees), new Action<Fee>(this.detach_Fees));
			this._MemberDetails = new EntitySet<MemberDetail>(new Action<MemberDetail>(this.attach_MemberDetails), new Action<MemberDetail>(this.detach_MemberDetails));
			this._MemberPackages = new EntitySet<MemberPackage>(new Action<MemberPackage>(this.attach_MemberPackages), new Action<MemberPackage>(this.detach_MemberPackages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(1500)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterationFees", DbType="Int NOT NULL")]
		public int RegisterationFees
		{
			get
			{
				return this._RegisterationFees;
			}
			set
			{
				if ((this._RegisterationFees != value))
				{
					this.OnRegisterationFeesChanging(value);
					this.SendPropertyChanging();
					this._RegisterationFees = value;
					this.SendPropertyChanged("RegisterationFees");
					this.OnRegisterationFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdmissionFees", DbType="Int NOT NULL")]
		public int AdmissionFees
		{
			get
			{
				return this._AdmissionFees;
			}
			set
			{
				if ((this._AdmissionFees != value))
				{
					this.OnAdmissionFeesChanging(value);
					this.SendPropertyChanging();
					this._AdmissionFees = value;
					this.SendPropertyChanged("AdmissionFees");
					this.OnAdmissionFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredOn", DbType="Date NOT NULL")]
		public System.DateTime RegisteredOn
		{
			get
			{
				return this._RegisteredOn;
			}
			set
			{
				if ((this._RegisteredOn != value))
				{
					this.OnRegisteredOnChanging(value);
					this.SendPropertyChanging();
					this._RegisteredOn = value;
					this.SendPropertyChanged("RegisteredOn");
					this.OnRegisteredOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePic", DbType="NVarChar(1500)")]
		public string ProfilePic
		{
			get
			{
				return this._ProfilePic;
			}
			set
			{
				if ((this._ProfilePic != value))
				{
					this.OnProfilePicChanging(value);
					this.SendPropertyChanging();
					this._ProfilePic = value;
					this.SendPropertyChanged("ProfilePic");
					this.OnProfilePicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Attendance", Storage="_Attendances", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Attendance> Attendances
		{
			get
			{
				return this._Attendances;
			}
			set
			{
				this._Attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Fee", Storage="_Fees", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Fee> Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				this._Fees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberDetail", Storage="_MemberDetails", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<MemberDetail> MemberDetails
		{
			get
			{
				return this._MemberDetails;
			}
			set
			{
				this._MemberDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberPackage", Storage="_MemberPackages", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<MemberPackage> MemberPackages
		{
			get
			{
				return this._MemberPackages;
			}
			set
			{
				this._MemberPackages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Fees(Fee entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Fees(Fee entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_MemberDetails(MemberDetail entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_MemberDetails(MemberDetail entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_MemberPackages(MemberPackage entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_MemberPackages(MemberPackage entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Packages")]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PackageName;
		
		private string _PackageDetails;
		
		private int _Price;
		
		private System.Nullable<int> _DiscountedPrice;
		
		private string _D1;
		
		private string _D2;
		
		private System.Nullable<int> _PackageTypeId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private string _PackageImage;
		
		private EntitySet<MemberPackage> _MemberPackages;
		
		private EntityRef<PackageType> _PackageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPackageNameChanging(string value);
    partial void OnPackageNameChanged();
    partial void OnPackageDetailsChanging(string value);
    partial void OnPackageDetailsChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnDiscountedPriceChanging(System.Nullable<int> value);
    partial void OnDiscountedPriceChanged();
    partial void OnD1Changing(string value);
    partial void OnD1Changed();
    partial void OnD2Changing(string value);
    partial void OnD2Changed();
    partial void OnPackageTypeIdChanging(System.Nullable<int> value);
    partial void OnPackageTypeIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnPackageImageChanging(string value);
    partial void OnPackageImageChanged();
    #endregion
		
		public Package()
		{
			this._MemberPackages = new EntitySet<MemberPackage>(new Action<MemberPackage>(this.attach_MemberPackages), new Action<MemberPackage>(this.detach_MemberPackages));
			this._PackageType = default(EntityRef<PackageType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageName", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string PackageName
		{
			get
			{
				return this._PackageName;
			}
			set
			{
				if ((this._PackageName != value))
				{
					this.OnPackageNameChanging(value);
					this.SendPropertyChanging();
					this._PackageName = value;
					this.SendPropertyChanged("PackageName");
					this.OnPackageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageDetails", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string PackageDetails
		{
			get
			{
				return this._PackageDetails;
			}
			set
			{
				if ((this._PackageDetails != value))
				{
					this.OnPackageDetailsChanging(value);
					this.SendPropertyChanging();
					this._PackageDetails = value;
					this.SendPropertyChanged("PackageDetails");
					this.OnPackageDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountedPrice", DbType="Int")]
		public System.Nullable<int> DiscountedPrice
		{
			get
			{
				return this._DiscountedPrice;
			}
			set
			{
				if ((this._DiscountedPrice != value))
				{
					this.OnDiscountedPriceChanging(value);
					this.SendPropertyChanging();
					this._DiscountedPrice = value;
					this.SendPropertyChanged("DiscountedPrice");
					this.OnDiscountedPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D1", DbType="NVarChar(MAX)")]
		public string D1
		{
			get
			{
				return this._D1;
			}
			set
			{
				if ((this._D1 != value))
				{
					this.OnD1Changing(value);
					this.SendPropertyChanging();
					this._D1 = value;
					this.SendPropertyChanged("D1");
					this.OnD1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D2", DbType="NVarChar(MAX)")]
		public string D2
		{
			get
			{
				return this._D2;
			}
			set
			{
				if ((this._D2 != value))
				{
					this.OnD2Changing(value);
					this.SendPropertyChanging();
					this._D2 = value;
					this.SendPropertyChanged("D2");
					this.OnD2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageTypeId", DbType="Int")]
		public System.Nullable<int> PackageTypeId
		{
			get
			{
				return this._PackageTypeId;
			}
			set
			{
				if ((this._PackageTypeId != value))
				{
					if (this._PackageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PackageTypeId = value;
					this.SendPropertyChanged("PackageTypeId");
					this.OnPackageTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageImage", DbType="NVarChar(1500)")]
		public string PackageImage
		{
			get
			{
				return this._PackageImage;
			}
			set
			{
				if ((this._PackageImage != value))
				{
					this.OnPackageImageChanging(value);
					this.SendPropertyChanging();
					this._PackageImage = value;
					this.SendPropertyChanged("PackageImage");
					this.OnPackageImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_MemberPackage", Storage="_MemberPackages", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<MemberPackage> MemberPackages
		{
			get
			{
				return this._MemberPackages;
			}
			set
			{
				this._MemberPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageType_Package", Storage="_PackageType", ThisKey="PackageTypeId", OtherKey="Id", IsForeignKey=true)]
		public PackageType PackageType
		{
			get
			{
				return this._PackageType.Entity;
			}
			set
			{
				PackageType previousValue = this._PackageType.Entity;
				if (((previousValue != value) 
							|| (this._PackageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageType.Entity = null;
						previousValue.Packages.Remove(this);
					}
					this._PackageType.Entity = value;
					if ((value != null))
					{
						value.Packages.Add(this);
						this._PackageTypeId = value.Id;
					}
					else
					{
						this._PackageTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PackageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MemberPackages(MemberPackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_MemberPackages(MemberPackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageType")]
	public partial class PackageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private System.Nullable<int> _NumberOfDays;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Package> _Packages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNumberOfDaysChanging(System.Nullable<int> value);
    partial void OnNumberOfDaysChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public PackageType()
		{
			this._Packages = new EntitySet<Package>(new Action<Package>(this.attach_Packages), new Action<Package>(this.detach_Packages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfDays", DbType="Int")]
		public System.Nullable<int> NumberOfDays
		{
			get
			{
				return this._NumberOfDays;
			}
			set
			{
				if ((this._NumberOfDays != value))
				{
					this.OnNumberOfDaysChanging(value);
					this.SendPropertyChanging();
					this._NumberOfDays = value;
					this.SendPropertyChanged("NumberOfDays");
					this.OnNumberOfDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageType_Package", Storage="_Packages", ThisKey="Id", OtherKey="PackageTypeId")]
		public EntitySet<Package> Packages
		{
			get
			{
				return this._Packages;
			}
			set
			{
				this._Packages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.PackageType = this;
		}
		
		private void detach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.PackageType = null;
		}
	}
}
#pragma warning restore 1591
